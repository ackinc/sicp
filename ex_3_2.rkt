#lang racket
(define (make-monitored f)
  (let ((n_calls 0))
    (define get (lambda () n_calls))
    (define inc (lambda () (set! n_calls (+ n_calls 1))))
    (define reset (lambda () (set! n_calls 0)))
    (define call-f (lambda (x)
                     (inc)
                     (f x)))
    (define (dispatch m)
      (cond ((eq? m 'how-many-calls?) (get))
            ((eq? m 'reset-count) (reset))
            (else (call-f m))))
    dispatch))

(define monitored-f (make-monitored (lambda (x) (+ x 2))))

(= (monitored-f 'how-many-calls?) 0)
(monitored-f 2)
(monitored-f 4)
(= (monitored-f 'how-many-calls?) 2)
(monitored-f 'reset-count)
(= (monitored-f 'how-many-calls?) 0)
(monitored-f 2)
(= (monitored-f 'how-many-calls?) 1)