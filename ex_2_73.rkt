#lang racket
(define (variable? x) (symbol? x))
(define (same-variable? x y) (and (variable? x) (variable? y) (eq? x y)))
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp) var))))

(define (operator exp) (car exp))
(define (operands exp) (cdr exp))

(define (install-sum-package)
  (define (make x y) (list '+ x y))
  (define (addend operands) (car operands))
  (define (augend operands) (cadr operands))
  (define (deriv-sum operands var)
    ((get 'make '+) (deriv (addend operands) var)
                    (deriv (augend operands) var)))
  (put 'make '+ make)
  (put 'deriv '+ deriv-sum))

(define (install-product-package)
  (define (make x y) (list '* x y))
  (define (multiplier operands) (car operands))
  (define (multiplicand operands) (cadr operands))
  (define (deriv-prod operands var)
    ((get 'make '+) ((get 'make '*) (multiplier operands)
                                    (deriv (multiplicand operands) var))
                    ((get 'make '*) (deriv (multiplier operands) var)
                                    (multiplicand operands))))
  (put 'make '* make)
  (put 'deriv '* deriv-prod))

(define (install-exponent-package)
  (define (make x y) (list '^ x y))
  (define (base operands) (car operands))
  (define (exponent operands) (cadr operands))
  (define (deriv-exp operands var)
    (if (not (same-variable? (base operands) var))
        0
        ((get 'make '*) (exponent operands)
                        ((get 'make '^) (base operands)
                                        ((get 'make '+) (exponent operands) -1)))))
  (put 'make '^ make)
  (put 'deriv '^ deriv-exp))