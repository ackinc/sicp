#lang racket
(define (make-table same-key?)
  (let ((table (mcons 'table null)))

    (define (assoc key records)
      (cond ((null? records) #f)
            ((same-key? key (mcar (mcar records))) (mcar records))
            (else (assoc key (mcdr records)))))

    (define (insert! keys value)
      (define (helper rest-keys value cur-table)
        (if (null? (cdr rest-keys))
            (let ((record (assoc (car rest-keys) (mcdr cur-table))))
              (if record
                  (set-mcdr! record value)
                  (set-mcdr! cur-table (mcons (mcons (car rest-keys) value) (mcdr cur-table)))))
            (let ((subtable (assoc (car rest-keys) (mcdr cur-table))))
              (if subtable
                  (if (or (mpair? (mcdr subtable)) (null? (mcdr subtable)))
                      (helper (cdr rest-keys) value subtable)
                      (begin (set-mcdr! subtable null)
                             (helper rest-keys value cur-table)))
                  (begin (set-mcdr! cur-table (mcons (mcons (car rest-keys) null) (mcdr cur-table)))
                         (helper rest-keys value cur-table))))))
      (if (null? keys)
          (error "insert! -- called with empty list of keys")
          (helper keys value table)))

    (define (lookup keys)
      (define (helper rest-keys table)
        (let ((subtable (assoc (car rest-keys) (mcdr table))))
          (if subtable
              (if (null? (cdr rest-keys))
                  (mcdr subtable)
                  (helper (cdr rest-keys) subtable))
              #f)))
      (if (null? keys)
          (error "lookup -- called with empty list of keys")
          (helper keys table)))

    (define (dispatch m)
      (cond ((eq? m 'insert) insert!)
            ((eq? m 'lookup) lookup)
            (else (error "dispatch -- invalid message" m))))
    dispatch))

(define (insert! keys val table) ((table 'insert) keys val))
(define (lookup keys table) ((table 'lookup) keys))

; TESTS
(define t (make-table equal?))
(insert! '(letters a) 1 t)
(insert! '(letters b) 2 t)
(insert! '(math plus) '+ t)
(insert! '(math minus) '- t)
(insert! '(math times) '* t)
(insert! '(name) 'Anirudh t)
(insert! '(age) 26 t)
(insert! '(sex) 'Male t)
(insert! '(a b c) 'Anirudh26Male t)

(eq? (lookup '(letters a) t) 1)
(eq? (lookup '(letters b) t) 2)
(eq? (lookup '(letters c) t) #f)
(eq? (lookup '(math plus) t) '+)
(eq? (lookup '(math times) t) '*)
(eq? (lookup '(math divide) t) #f)
(eq? (lookup '(name) t) 'Anirudh)
(eq? (lookup '(a b c) t) 'Anirudh26Male)

(insert! '(name age sex)  'Anirudh26Male t)
(insert! '(name sex age dob)  'AnirudhMale262ndMay1991 t)
(eq? (lookup '(name age sex) t) 'Anirudh26Male)
(eq? (lookup '(name sex age dob) t) 'AnirudhMale262ndMay1991)

(define (approx-equal x y)
  (if (and (number? x) (number? y))
      (< (abs (- x y)) 0.5)
      (equal? x y)))
(define t2 (make-table approx-equal))
(insert! (list 'numbers 1) 'one t2)
(insert! (list 'numbers 8.9) 'eightpointnine t2)
(insert! (list 'numbers 30) 'thirty t2)
(insert! (list 'numbers 3) 'three t2)
(insert! (list 'numbers 0) 'zero t2)
(eq? (lookup (list 'numbers 1) t2) 'one)
(eq? (lookup (list 'numbers 9) t2) 'eightpointnine)
(eq? (lookup (list 'numbers 9.4) t2) #f)
(eq? (lookup (list 'numbers 30) t2) 'thirty)
(eq? (lookup (list 'numbers 30.3) t2) 'thirty)
(eq? (lookup (list 'numbers 30.6) t2) #f)