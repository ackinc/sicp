#lang racket
(define (pow a b)
  (cond ((= b 0) 1)
        ((odd? b) (* a (pow a (- b 1))))
        (else (pow (* a a) (/ b 2)))))

(define (cons a b) (* (pow 2 a) (pow 3 b)))
(define (car z)
  (define (helper n acc)
    (if (even? n)
        (helper (/ n 2) (+ acc 1))
        acc))
  (helper z 0))
(define (cdr z)
  (define (helper n acc)
    (if (= (remainder n 3) 0)
        (helper (/ n 3) (+ acc 1))
        acc))
  (helper z 0))

; TESTS
(= (car (cons 0 0)) 0)
(= (cdr (cons 0 0)) 0)
(= (car (cons 3 0)) 3)
(= (cdr (cons 3 0)) 0)
(= (car (cons 0 3)) 0)
(= (cdr (cons 0 3)) 3)
(= (car (cons 3 3)) 3)
(= (cdr (cons 3 3)) 3)