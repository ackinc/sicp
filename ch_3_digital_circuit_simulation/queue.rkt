#lang racket
(provide make-queue empty-queue? front-queue insert-queue! delete-queue!)

(define (make-queue)
  (let ((front-ptr null)
        (rear-ptr null))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue) (if (empty-queue?)
                              (error "front-queue -- called on empty queue")
                              (mcar front-ptr)))
    (define (insert-queue! item)
      (let ((node (mcons item null)))
        (if (empty-queue?)
            (set! front-ptr node)
            (set-mcdr! rear-ptr node))
        (set! rear-ptr node)
        (mcons front-ptr rear-ptr)))
    (define (delete-queue!)
      (if (empty-queue?)
          (error "delete-queue! -- called on empty queue")
          (set! front-ptr (mcdr front-ptr))))
    (define (dispatch m)
      (cond ((eq? m 'empty?) (empty-queue?))
            ((eq? m 'front) (front-queue))
            ((eq? m 'insert) insert-queue!)
            ((eq? m 'delete) (delete-queue!))
            (else (error "dispatch -- invalid message" m))))
    dispatch))

(define (empty-queue? q) (q 'empty?))
(define (front-queue q) (q 'front))
(define (insert-queue! q item) ((q 'insert) item))
(define (delete-queue! q) (q 'delete))