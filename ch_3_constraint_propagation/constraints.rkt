#lang racket
(require "connector.rkt")
(provide constant adder multiplier
         probe
         averager squarer)

(define (constant value connector)
  (define (me request)
    (error "constant -- unknown request" request))
  (connect! connector me)
  (set-value! connector value me)
  me)

(define (adder a1 a2 s)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2)) (set-value! s (+ (get-value a1) (get-value a2)) me))
          ((and (has-value? a1) (has-value? s)) (set-value! a2 (- (get-value s) (get-value a1)) me))
          ((and (has-value? a2) (has-value? s)) (set-value! a1 (- (get-value s) (get-value a2)) me))))
  
  (define (process-forget-value)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (forget-value! s me)
    (process-new-value))
  
  (define (me request)
    (cond ((eq? request 'value-obtained) (process-new-value))
          ((eq? request 'value-lost) (process-forget-value))
          (else (error "adder -- unknown request" request))))
  
  (connect! a1 me)
  (connect! a2 me)
  (connect! s me)

  me)

(define (multiplier m1 m2 p)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0)) (and (has-value? m2) (= (get-value m2) 0))) (set-value! p 0 me))
          ((and (has-value? m1) (has-value? m2)) (set-value! p (* (get-value m1) (get-value m2)) me))
          ((and (has-value? m1) (has-value? p)) (set-value! m2 (/ (get-value p) (get-value m1)) me))
          ((and (has-value? m2) (has-value? p)) (set-value! m1 (/ (get-value p) (get-value m2)) me))))
  
  (define (process-forget-value)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (forget-value! p me)
    (process-new-value))
  
  (define (me request)
    (cond ((eq? request 'value-obtained) (process-new-value))
          ((eq? request 'value-lost) (process-forget-value))
          (else (error "adder -- unknown request" request))))
  
  (connect! m1 me)
  (connect! m2 me)
  (connect! p me)

  me)

(define (probe name connector)
  (define (print-probe val)
    (display "Probe: ")
    (display name)
    (display " ")
    (display val)
    (newline))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe "?"))
  (define (me request)
    (cond ((eq? request 'value-obtained) (process-new-value))
          ((eq? request 'value-lost) (process-forget-value))
          (else (error "probe -- unknown request" request))))
  (connect! connector me)
  me)

; ex 3.33
(define (averager a b avg)
  (let ((s (make-connector))
        (two (make-connector)))
    (adder a b s)
    (constant 2 two)
    (multiplier avg two s)))

; ex 3.35
(define (squarer a b)
  (define (square x) (* x x))
  (define (process-new-value)
    (cond ((has-value? b) (if (< (get-value b) 0)
                              (error "squarer -- b cannot be negative" (get-value b))
                              (set-value! a (sqrt (get-value b)) me)))
          ((has-value? a) (set-value! b (square (get-value a)) me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'value-obtained) (process-new-value))
          ((eq? request 'value-lost) (process-forget-value))
          (else (error "squarer -- unknown request" request))))
  (connect! a me)
  (connect! b me)
  me)