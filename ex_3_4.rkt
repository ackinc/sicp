#lang racket
(define (call-the-cops) (display "The cops have been alerted.")(newline))

(define (make-account balance password)
  (define incorrect-password-attempts 0)
  (define (withdraw amount)
    (if (<= amount balance)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (inc-ipa) (set! incorrect-password-attempts (+ incorrect-password-attempts 1)))
  (define (reset-ipa) (set! incorrect-password-attempts 0))
  (define (incorrect-password-handler x)
    (if (>= incorrect-password-attempts 7)
        (call-the-cops)
        (inc-ipa))
    "Incorrect password")
  (define (dispatch pwd m)
    (if (not (eq? pwd password))
        incorrect-password-handler
        (begin (reset-ipa)
               (cond ((eq? m 'withdraw) (begin (reset-ipa)
                                               withdraw))
                     ((eq? m 'deposit) (begin (reset-ipa)
                                              deposit))
                     (else (lambda (x) (begin (reset-ipa)
                                   "Invalid message")))))))
  dispatch)

(define acc (make-account 200 'anirudh))
(eq? ((acc 'a 'withdrawal) 50) "Incorrect password")
(eq? ((acc 'anirudh 'withdrawal) 50) "Invalid message")
(eq? ((acc 'anirudh 'withdraw) 500) "Insufficient funds")
(eq? ((acc 'anirudh 'withdraw) 50) 150)
(eq? ((acc 'anirudh 'deposit) 50) 200)

(eq? ((acc 'a 'withdrawal) 50) "Incorrect password")
(eq? ((acc 'a 'withdrawal) 50) "Incorrect password")
(eq? ((acc 'a 'withdrawal) 50) "Incorrect password")
(eq? ((acc 'a 'withdrawal) 50) "Incorrect password")
(eq? ((acc 'a 'withdrawal) 50) "Incorrect password")
(eq? ((acc 'a 'withdrawal) 50) "Incorrect password")
(eq? ((acc 'a 'withdrawal) 50) "Incorrect password")

; the next attempt will bring the cops
(eq? ((acc 'a 'withdrawal) 50) "Incorrect password")